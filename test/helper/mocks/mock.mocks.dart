// // Mocks generated by Mockito 5.2.0 from annotations
// // in quiz_app/test/helper/mocks/mock.dart.
// // Do not manually edit this file.

// import 'dart:async' as _i4;

// import 'package:dartz/dartz.dart' as _i2;
// import 'package:mockito/mockito.dart' as _i1;
// import 'package:quiz_app/core/errors/failure.dart' as _i5;
// import 'package:quiz_app/features/quiz/domain/entity/quiz.dart' as _i6;
// import 'package:quiz_app/features/quiz/domain/repository/quiz_repository.dart'
//     as _i3;
// import 'package:quiz_app/features/quiz/domain/usecase/get_quiz.dart' as _i8;
// import 'package:shared_preferences/shared_preferences.dart' as _i7;

// // ignore_for_file: type=lint
// // ignore_for_file: avoid_redundant_argument_values
// // ignore_for_file: avoid_setters_without_getters
// // ignore_for_file: comment_references
// // ignore_for_file: implementation_imports
// // ignore_for_file: invalid_use_of_visible_for_testing_member
// // ignore_for_file: prefer_const_constructors
// // ignore_for_file: unnecessary_parenthesis
// // ignore_for_file: camel_case_types

// class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

// class _FakeQuizRepository_1 extends _i1.Fake implements _i3.QuizRepository {}

// /// A class which mocks [QuizRepository].
// ///
// /// See the documentation for Mockito's code generation for more information.
// class MockQuizRepository extends _i1.Mock implements _i3.QuizRepository {
//   MockQuizRepository() {
//     _i1.throwOnMissingStub(this);
//   }

//   @override
//   _i4.Future<_i2.Either<_i5.Failure, List<_i6.Quiz>>> getQuiz() =>
//       (super.noSuchMethod(Invocation.method(#getQuiz, []),
//           returnValue: Future<_i2.Either<_i5.Failure, List<_i6.Quiz>>>.value(
//               _FakeEither_0<_i5.Failure, List<_i6.Quiz>>())) as _i4
//           .Future<_i2.Either<_i5.Failure, List<_i6.Quiz>>>);
// }

// /// A class which mocks [SharedPreferences].
// ///
// /// See the documentation for Mockito's code generation for more information.
// class MockSharedPreferences extends _i1.Mock implements _i7.SharedPreferences {
//   MockSharedPreferences() {
//     _i1.throwOnMissingStub(this);
//   }

//   @override
//   Set<String> getKeys() => (super.noSuchMethod(Invocation.method(#getKeys, []),
//       returnValue: <String>{}) as Set<String>);
//   @override
//   Object? get(String? key) =>
//       (super.noSuchMethod(Invocation.method(#get, [key])) as Object?);
//   @override
//   bool? getBool(String? key) =>
//       (super.noSuchMethod(Invocation.method(#getBool, [key])) as bool?);
//   @override
//   int? getInt(String? key) =>
//       (super.noSuchMethod(Invocation.method(#getInt, [key])) as int?);
//   @override
//   double? getDouble(String? key) =>
//       (super.noSuchMethod(Invocation.method(#getDouble, [key])) as double?);
//   @override
//   String? getString(String? key) =>
//       (super.noSuchMethod(Invocation.method(#getString, [key])) as String?);
//   @override
//   bool containsKey(String? key) =>
//       (super.noSuchMethod(Invocation.method(#containsKey, [key]),
//           returnValue: false) as bool);
//   @override
//   List<String>? getStringList(String? key) =>
//       (super.noSuchMethod(Invocation.method(#getStringList, [key]))
//           as List<String>?);
//   @override
//   _i4.Future<bool> setBool(String? key, bool? value) =>
//       (super.noSuchMethod(Invocation.method(#setBool, [key, value]),
//           returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
//   @override
//   _i4.Future<bool> setInt(String? key, int? value) =>
//       (super.noSuchMethod(Invocation.method(#setInt, [key, value]),
//           returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
//   @override
//   _i4.Future<bool> setDouble(String? key, double? value) =>
//       (super.noSuchMethod(Invocation.method(#setDouble, [key, value]),
//           returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
//   @override
//   _i4.Future<bool> setString(String? key, String? value) =>
//       (super.noSuchMethod(Invocation.method(#setString, [key, value]),
//           returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
//   @override
//   _i4.Future<bool> setStringList(String? key, List<String>? value) =>
//       (super.noSuchMethod(Invocation.method(#setStringList, [key, value]),
//           returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
//   @override
//   _i4.Future<bool> remove(String? key) =>
//       (super.noSuchMethod(Invocation.method(#remove, [key]),
//           returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
//   @override
//   _i4.Future<bool> commit() =>
//       (super.noSuchMethod(Invocation.method(#commit, []),
//           returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
//   @override
//   _i4.Future<bool> clear() => (super.noSuchMethod(Invocation.method(#clear, []),
//       returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
//   @override
//   _i4.Future<void> reload() =>
//       (super.noSuchMethod(Invocation.method(#reload, []),
//           returnValue: Future<void>.value(),
//           returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
// }

// /// A class which mocks [GetQuiz].
// ///
// /// See the documentation for Mockito's code generation for more information.
// class MockGetQuiz extends _i1.Mock implements _i8.GetQuiz {
//   MockGetQuiz() {
//     _i1.throwOnMissingStub(this);
//   }

//   @override
//   _i3.QuizRepository get repository =>
//       (super.noSuchMethod(Invocation.getter(#repository),
//           returnValue: _FakeQuizRepository_1()) as _i3.QuizRepository);
//   @override
//   _i4.Future<_i2.Either<_i5.Failure, List<_i6.Quiz>>> call() =>
//       (super.noSuchMethod(Invocation.method(#call, []),
//           returnValue: Future<_i2.Either<_i5.Failure, List<_i6.Quiz>>>.value(
//               _FakeEither_0<_i5.Failure, List<_i6.Quiz>>())) as _i4
//           .Future<_i2.Either<_i5.Failure, List<_i6.Quiz>>>);
// }
